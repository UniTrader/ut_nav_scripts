<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.move.gate" version="001" priority="10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--

 rewritten from scratch by UniTrader
  
 Routine for passing through Gates (was in move.jump and move.generic before)
 
 based on the original ut.cac.move.gate but wanted to do some drastic changes, therefore using a new Script. Core Ideas will remain.
 
 Script now Assumes we are nearby the Gate on Script Start - if not it may delay  the Passage of others

  -->
<!-- ToDo: ADD/RESEARCH THIS FROM VANILLA:
        <include_interrupt_actions ref="NPCUseCase_NavApproachJumpGate" /> 
  -->
  <params>
    <param name="gate" default="false" comment="Gate to go through (Must be in the same Zone)"/>
    <param name="cleargate" default="true" comment="Clear the Gate after Passage?"/>
    
    <param name="queue_position" default="false" comment="position in the Gate queue where Fight Ships add themselves to to pass the Gate before unarmed Ships (false will assume this is the leader and add to the End)"/>
    <param name="leader" default="false" comment="set to true if this Ship should wait for the $passage_group before continuing and to false if not - (if set to 2 will default to be true if a queue_position is passed and false if not )"/>
    <param name="passage_group" default="false" comment="Group of all Ships which pass the Gate as a Group"/>
    
  </params>
  <interrupts>
  </interrupts>
  <attention min="unknown">
    <actions>
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Script started with Params:\n$gate: %3 ; $cleargate: %4 $formationlist: %5'.[this.name,this.container.name,$gate,$cleargate,@$formationlist]"/>
      
      <label name="start"/>
      
      <!-- then check if the Input and Situation is Valid  -->
      <do_if value="not $gate.exists or not ( $gate.isclass.gate or $gate.isclass.highwayentrygate )">
        <debug_text filter="error" text="'%1 %2 Gate not existent or not a gate - aborting!'.[this.name,this.container.name]"/>
        <return/>
      </do_if>
      <do_if value="not ( $gate.isclass.highwayentrygate or $gate.isactive )">
        <debug_text filter="error" text="'%1 %2 Trying to pass inactive Gate - aborting!'.[this.name,this.container.name]"/>
        <return/>
      </do_if>
      <do_if value="if $gate.isclass.gate then this.zone != $gate.zone else this.zone != $gate.highway.origin">
        <do_if value="this.ship.distanceto.{$gate} gt 25km">
          <debug_text filter="error" text="'%1 %2 Not in Gate Zone and farther than 25km - Still continuing though! (distance: %3)'.[this.name,this.container.name,this.ship.distanceto.{$gate}]"/>
        </do_if>
        <do_else>
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Not in Gate Zone but closer than 25km - continuing anyway (distance: %3)'.[this.name,this.container.name,this.ship.distanceto.{$gate}]"/>
        </do_else>
      </do_if>
      
      <!-- HACK for FoO - Albion Gate: Ignore the Big Asteroid when aquiring Safe Pos -->
      <!--do_if value="$gate.zone.macro.ismacro.{'Cluster_T_Sector01_Zone001_macro'}">
        <find_object name="$ignoredobject" space="$gate.zone" macro="macro.landmarks_unique_the_mace_macro"/>
      </do_if>
      <do_else-->
        <set_value name="$ignoredobject" exact="this.ship"/>
      <!--/do_else-->
      
      <!-- Dont abort Path on first move_to, but for each one after that for fluid movement (except it is currently just flying to a safepos, indicated by this$mayabortpath)-->
      <set_value name="$continuepath" exact="not this.$mayabortpath?"/>
      <remove_value name="this.$mayabortpath"/>
      
      <set_command_action commandaction="commandaction.flyingto" param="$gate.destination"/>
      <do_if value="this.$ut_cac?">
        <set_value name="this.$ut_cac.$isactive"/>
      </do_if>
      
      <!-- Planned feature: multiple Approach Paths - Define the Lists for target offsets here -->
      <set_value name="$OffsetList" exact="[position.[0m,0m,-1m]]"/>
      
      <!-- check if global Var for Gate Passage exists and create if necesary -->
      <!-- Note: the Table must always have a first entry which is reserved for the Ship currently flying into the Gate - set to null if currently no Ship is passing. -->
      <do_if value="not global.$gate_queue?">
        <set_value name="global.$gate_queue" exact="table[{$gate}=[[]]]"/>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Creating Global Gate Passage Table: %3 current Gate: %4'.[this.knownname,this.container.knownname,global.$gate_queue,$gate]"/>
      </do_if>
      <do_elseif value="not global.$gate_queue.{$gate}?">
        <create_list name="global.$gate_queue.{$gate}" exact="$OffsetList.count"/>
        <set_value name="global.$gate_queue.{$gate}.{1}" exact="[]"/>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Adding Gate to Global Gate Passage Table: %3 current Gate: %4'.[this.knownname,this.container.knownname,global.$gate_queue,$gate]"/>
      </do_elseif>
      
      <!-- Register in Gate Queue, Create Passage Group to keep a Group of Ships together after Passage and tell Followers our Position so they can add themselves before us if required -->
      <do_if value="not $queue_position">
        <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
          <debug_text filter="error" text="'%1 %2 Already Registered in Gate Queue on Script Start - removing %3'.[this.name,this.container.name,global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
          <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
        </do_if>
        <append_to_list name="global.$gate_queue.{$gate}.{1}" exact="this.ship"/>
        <set_value name="$queue_position" exact="global.$gate_queue.{$gate}.{1}.count"/>
      </do_if>
      <do_else>
        <set_value name="global.$gate_queue.{$gate}.{1}.{$queue_position}" exact="this.ship" operation="insert"/>
        <!-- ToDo: Signal Everyone who was just moved up (or do a general Update) - not necesary currently since its only used for Group Coordination. Might be necesary when Special Ability to Sneak in Queue becomes available -->
      </do_else>
      <do_if value="this.ship.owner == faction.player">
        <set_object_name object="this.ship" name="(if $queue_position lt 10 then '00' else if $queue_position lt 100 then '0' else '' ) + $queue_position"/>
      </do_if>
      <do_if value="not $passage_group">
        <create_group groupname="$passage_group"/>
      </do_if>
      <add_to_group groupname="$passage_group" object="this.ship"/>
      <signal_objects object="this.ship" param="'travel gate prep'" param2="[$gate,$queue_position]" param3="$passage_group"/>
      <wait exact="100ms"/>
      
      <!-- Calculate Position so we can sort into the Queue behind the Gate, and Move there (restarts with every Passage or Abort of others for fluid movement) -->
      <label name="fly to prep pos"/>
      <set_value name="$queue_position" exact="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}"/>
      <do_if value="this.ship.owner == faction.player">
        <set_object_name object="this.ship" name="(if $queue_position lt 10 then '00' else if $queue_position lt 100 then '0' else '' ) + $queue_position"/>
      </do_if>
      
      <do_if value="not $queue_position">
        <debug_text filter="error" text="'%1 %2 Not in Gate Queue - Turning around and Restarting!'.[this.name,this.container.name]"/>
        <transform_position name="$position" refposition="this.ship.position" refrotation="this.ship.rotation" >
          <position x="-10km" y="0m" z="0m"/>
        </transform_position>
        <move_to object="this.ship" destination="this.ship.zone" forceposition="false" forcerotation="false" finishonapproach="true" abortpath="true">
          <position value="$position" />
          <rotation value="this.ship.rotation.inverse"/>
        </move_to>
        <resume label="start"/>
      </do_if>
      <!-- calculate Target Distance to the Gate -->
      <set_value name="$queue_distance" exact="0m"/>
      <do_all exact="$queue_position" counter="$i" reverse="true">
        <do_if value="global.$gate_queue.{$gate}.{1}.{$i}.exists and global.$gate_queue.{$gate}.{1}.{$i}.sector == $gate.sector">
          <set_value name="$queue_distance" operation="add" exact="global.$gate_queue.{$gate}.{1}.{$i}.size * 1.2"/>
        </do_if>
        <do_else>
          <!-- remove invalid entries from queue when encountering them.. -->
          <remove_value name="global.$gate_queue.{$gate}.{1}.{$i}"/>
          <!-- also re-adjust queue Position -->
          <set_value name="$queue_position" operation="subtract"/>
      <do_if value="this.ship.owner == faction.player">
        <set_object_name object="this.ship" name="(if $queue_position lt 10 then '00' else if $queue_position lt 100 then '0' else '') + $queue_position"/>
      </do_if>
        </do_else>
      </do_all>
      <do_if value="global.$gate_queue.{$gate}.{1}.{1}.pilot.commandaction.param == $gate" comment="if the leading Ship is currently flying into the Gate it doesnt need is full length reserved because one half will be behind the Gate at the target pos">
        <set_value name="$queue_distance" operation="subtract" exact="global.$gate_queue.{$gate}.{1}.{1}.size * 0.6"/>
      </do_if>
      <set_value name="$queue_distance" operation="subtract" exact="this.ship.size * 0.6" comment="current Ship only needs to be acounted for in half"/>
      <do_if value="$gate.isclass.gate" comment="approach Jump Gates from behind, therefore negative value (and Highway Entry Gates from the front)">
        <set_value name="$queue_distance" exact="$queue_distance * -1"/>
        <!--set_value name="$rotation" exact="$gate.rotation.inverse"/-->
      </do_if>
      <!--do_else>
        <set_value name="$rotation" exact="$gate.rotation"/>
      </do_else-->
      <transform_position name="$position" refposition="$gate.position" refrotation="$gate.rotation" >
        <position x="0m" y="0m" z="$queue_distance"/>
      </transform_position>
      <create_orientation name="$rotation" orientation="look_at"  refobject="$gate">
          <position value="$position"/>
        </create_orientation>
      <!--get_safe_pos result="$safeposition" allowyaxis="true" zone="$gate.zone" value="$position" radius="this.ship.size" ignored="$ignoredobject"/-->
      <!-- move to position in queue/prep pos -->
      
      <move_to object="this.ship" destination="$gate.zone" forceposition="false" forcerotation="false" finishonapproach="true" abortpath="not $continuepath">
        <position value="$position" />
        <rotation value="$rotation"/>
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="$gate" param="'travel gate update'"/>
              <event_object_signalled object="this.ship" param="'travel gate update'"/>
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.object == this.ship">
              <set_avoid_collisions object="this.ship" bigobjects="true" smallobjects="true" comment="re-enable Collision avoidance since we are no longer in queue"/>
              <set_value name="$continuepath" exact="false" comment="disable soft-advancing queue because we just got kicked back"/>
            </do_if>
            <do_elseif value="$continuepath != 2">
              <set_value name="$continuepath" exact="false" comment="disable soft-advancing queue because we didnt sort in in queue yet"/>
            </do_elseif>
            <resume label="fly to prep pos"/>
          </actions>
        </interrupt>
      </move_to>
      <set_value name="$continuepath" exact="2" comment="re-enable soft-advancing queue and also set it persistent"/>
      <set_avoid_collisions object="this.ship" bigobjects="false" smallobjects="false" comment="disable collision avoidance while in queue to avoid other ships pushing us out and delaying everything"/>
      <do_if value="$queue_position == 1">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Reached Wait Pos in front of queue - Flying into Gate now.'.[this.knownname,this.container.knownname,global.$gate_queue,$gate]"/>
        <resume label="pass gate"/>
      </do_if>
      <do_elseif value="this.ship.distanceto.{$gate} lt global.$gate_queue.{$gate}.{1}.{$queue_position - 1}.distanceto.{$gate}" comment="we are closer to the Gate than the Ship before us - swap positions to avoid delays">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Reached Wait Pos and Ship in front is farther away than we - swapping pos\nOther Ship: %3; Distance: %4 Our Distance: %5'.[this.knownname,this.container.knownname,global.$gate_queue.{$gate}.{1}.{$queue_position - 1}.name,global.$gate_queue.{$gate}.{1}.{$queue_position - 1}.distanceto.{$gate},this.ship.distanceto.{$gate}]"/>
        <set_value name="global.$gate_queue.{$gate}.{1}.{$queue_position}" exact="global.$gate_queue.{$gate}.{1}.{$queue_position - 1}"/>
        <set_value name="global.$gate_queue.{$gate}.{1}.{$queue_position - 1}" exact="this.ship"/>
        <signal_objects object="global.$gate_queue.{$gate}.{1}.{$queue_position}" param="'travel gate update'" comment="queue changed - signal the Ship we just changed positions with specifically"/>
        <resume label="fly to prep pos"/>
      </do_elseif>
      <do_else>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Reached Wait Pos and Ship in front is closer than we - waiting\nOther Ship: %3; Distance: %4 Our Distance: %5'.[this.knownname,this.container.knownname,global.$gate_queue.{$gate}.{1}.{$queue_position - 1}.name,global.$gate_queue.{$gate}.{1}.{$queue_position - 1}.distanceto.{$gate},this.ship.distanceto.{$gate}]"/>
        <wait max="5min" comment="just in case the Signal doesnt trigger properly">
        <interrupt>
          <conditions>
            <!--check_any-->
              <event_object_signalled object="$gate" param="'travel gate update'"/>
              <!--event_object_arrived_at_waypoint object="this.ship" lastwaypoint="true"/>
            </check_any-->
          </conditions>
          <actions>
            <!-- this has some odd side-effects - use at own risk
            <do_if value="event.name == 'event_object_arrived_at_waypoint'">
              <set_flight_control_model object="this.ship" flightcontrolmodel="flightcontrolmodel.linear"/>
            </do_if>
            -->
            <resume label="fly to prep pos"/>
          </actions>
        </interrupt>
        </wait>
        <resume label="fly to prep pos" comment="Queue got shorter - advance"/>
      </do_else>
      
      <label name="pass gate"/>
      <!-- check the Vanilla Gate Blocking Mechanism and (aggresively!) wait till its free -->
      <request_gate ship="this.ship" gate="if true then $gate else 'request 1'" result="$success" />
      <set_value name="$RequestingTimeout" min="player.age + 2min" max="player.age + 5min"/>
      <do_while value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship} gt 1 and not $success">
        <wait min="3s" max="8s" comment="aggresive gate polling, but only one Ship at the same time.">
          <interrupt>
            <conditions>
              <event_object_signalled object="$gate" param="'travel gate update'"/>
            </conditions>
          </interrupt>
        </wait>
        <!-- try again locking the Gate if timeout not reached yet -->
        <do_if value="player.age lt $RequestingTimeout">
          <request_gate ship="this.ship" gate="if true then $gate else 'request 2'" result="$success" />
        </do_if>
        <do_else>
          <set_value name="$success" exact="true"/>
        </do_else>
      </do_while>
      
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Passing Gate'.[this.name,this.container.name]"/>
      
      <do_if value="this.ship == player.ship">
        <!-- cache Assets of destination if player is on board to make transition smooth -->
        <precache_hint zone="$gate.destination"/>
      </do_if>
      
      <set_value name="$moveintogate" exact="true" />
      <signal_objects object="$gate" param="'travel gate update'" delay="100ms" comment="speed up process by telling everyone to advance to the next wait pos"/>
      <signal_objects object="this.ship" param="'travel gate start'" comment="Signalling we are now passing the Gate (used by DO for Drone Recall)"/>
      <label name="pass gate GO"/>
      <do_if value="$gate.isclass.gate" comment="Enter Jumpgate">
        <do_if value="this.ship.attention gt attention.visible">
          <transform_position name="$position" refposition="$gate.position" refrotation="$gate.rotation" >
            <position x="0m" y="0m" z="this.ship.length * 0.45"/>
          </transform_position>
          <set_value name="$rotation" exact="$gate.rotation.inverse"/>
          <set_command_action commandaction="commandaction.flyingto" param="$gate"/>
          <move_to object="this.ship" destination="$gate.zone" forceposition="true" forcerotation="true" finishonapproach="false" abortpath="not $continuepath" commandaction="false">
            <position value="$position" />
            <rotation value="$rotation"/>
            <interrupt>
              <conditions>
                <event_object_changed_sector object="this.ship" />
              </conditions>
              <actions>
                <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 just changed from cluster %3 to cluster %4 (moved through gate; move_to case)'.[this.name,this.container.name,$gate.zone.knownname,event.param2.knownname, event.param.knownname]"/>
                <set_value name="$moveintogate" exact="false" />
              </actions>
            </interrupt>
            <on_attentionchange>
              <do_if value="this.ship.attention gt attention.visible">
                <resume label="pass gate GO"/>
              </do_if>
            </on_attentionchange>
          </move_to>
        </do_if>
        <do_if value="$moveintogate">
          <move_gate object="this.ship" gate="if true then $gate else 'pass 1'" abortpath="false">
            <interrupt>
              <conditions>
                <event_object_changed_sector object="this.ship" />
              </conditions>
              <actions>
                <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 just changed from cluster %3 to cluster %4 (moved through gate; move_gate case)'.[this.name,this.container.name,$gate.zone.knownname,event.param2.knownname, event.param.knownname]"/>
                <set_value name="$moveintogate" exact="false" />
              </actions>
            </interrupt>
            <on_attentionchange>
              <do_if value="this.ship.attention gt attention.visible">
                <create_orientation name="$rotation" orientation="look_at"  refobject="$gate">
                   <position value="this.ship.position"/>
                </create_orientation>
                <warp object="this.ship" zone="this.zone">
                  <rotation value="$rotation"/>
                  <position object="this.ship"/>
                </warp>
              </do_if>
            </on_attentionchange>
          </move_gate>
        </do_if>
      </do_if>
      <do_else comment="Enter Highwayentrygate">
        <move_to object="this.ship" destination="$gate.destination" uselocalhighways="false" abortpath="false" forcesteering="false" forceposition="false" travel="false">
          <interrupt>
            <conditions>
              <event_object_changed_sector object="this.ship" />
                <check_value value="this.sector == $gate.destination.sector"/>
            </conditions>
            <actions>
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 just changed from cluster %3 to cluster %4 (moved through gate)'.[this.name,this.container.name,$gate.zone.knownname,event.param2.knownname, event.param.knownname]"/>
              <set_value name="$moveintogate" exact="false" />
            </actions>
          </interrupt>
          <on_attentionchange>
            <do_if value="this.ship.attention gt attention.visible">
              <create_orientation name="$rotation" orientation="look_at"  refobject="$gate">
                 <position value="this.ship.position"/>
              </create_orientation>
              <warp object="this.ship" zone="this.zone">
                <rotation value="$rotation"/>
                <position object="this.ship"/>
              </warp>
            </do_if>
          </on_attentionchange>
        </move_to>
      </do_else>
      <do_if value="$moveintogate">
        <wait>
          <interrupt>
            <conditions>
              <event_object_changed_cluster object="this.ship" />
            </conditions>
            <actions>
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 just changed from cluster %3 to cluster %4 (wait)'.[this.name,this.container.name,$gate.zone.knownname,event.param2.knownname, event.param.knownname]"/>
            </actions>
          </interrupt>
          <on_attentionchange>
            <do_if value="this.ship.attention gt attention.visible">
              <warp object="this.ship" zone="this.zone">
                <rotation value="$gate.rotation"/>
                <position object="this.ship"/>
             </warp>
            </do_if>
          </on_attentionchange>
        </wait>
      </do_if>
      <set_avoid_collisions object="this.ship" bigobjects="true" smallobjects="true" comment="restore collision avoidance behavior after Gate Passage"/>
      
      <!-- unlock Gate (Vanilla) and remove ourselves from the Waiting List, signal the next to go/prepare (UT CAC) -->
      <request_gate ship="this.ship" gate="if true then $gate else 'unlock 1'" unlock="true" result="$result"/>
      <do_if value="global.$gate_queue.{$gate}.{1}.{1}? and global.$gate_queue.{$gate}.{1}.{1} == this.ship">
        <remove_value name="global.$gate_queue.{$gate}.{1}.{1}"/>
      </do_if>
      <do_else>
        <debug_text filter="error" text="'%1 %2 Just passed the Gate and wanted to clear queue, but our Position was not 1 but %3'.[this.name,this.container.name,global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
        <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
        <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
          <debug_text filter="error" text="'And also %1'.[global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
          <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
          <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
            <debug_text filter="error" text="'And also %1 (2nd additional check)'.[global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
            <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
            <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
              <debug_text filter="error" text="'And also %1 (last check)'.[global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
              <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
            </do_if>
          </do_if>
        </do_if>
      </do_else>
      <signal_objects object="$gate" param="'travel gate update'"/>
      <signal_objects object="this.ship" param="'travel completed'"/>
      
      <!--  move forward a bit to clear gate exit for the next ship (rate can be one ship every 30s with this Script)  -->
      <do_if value="$cleargate" comment=" and this.ship.pilot.skill.navigation ge 2">
        <!--wait exact="100ms" comment="otherwise the player.ship skips movement for some reason"/-->
        <transform_position name="$position" refposition="this.ship.position" refrotation="this.ship.rotation" >
          <position x="0m" y="0m" z="(this.ship.size *6)"/>
        </transform_position>
        <!-- figure out an arrival position in the target zone -->
        <!-- HACK for FoO - AL Gate - ignore the big rock instead of the current ship for safepos AND dont avoid collissions to avoid needless tours -->
        <!--do_if value="this.zone.macro.ismacro.{'Cluster_T_Sector01_Zone001_macro'}">
          <find_object name="$ignoredobject" space="this.zone" macro="macro.landmarks_unique_the_mace_macro"/>
          <set_avoid_collisions object="this.ship" bigobjects="false" smallobjects="false"/>
        </do_if>
        <do_else-->
          <set_value name="$ignoredobject" exact="this.ship"/>
        <!--/do_else-->
        <get_safe_pos result="$safeposition" allowyaxis="true" zone="this.zone" value="$position" radius="this.ship.size" ignored="$ignoredobject" min="this.ship.size*2"/>
        <move_to object="this.ship" destination="this.zone" ><!-- forcesteering="true" finishonapproach="true" boost="this.ship.pilot.skill.navigation ge 3" usehighways="false"-->
          <position value="$safeposition"/>
          <interrupt_after_time time="0s"/>
        </move_to>
        <do_if value="this.ship.attention ge attention.visible">
          <set_flight_control_model object="this.ship" flightcontrolmodel="flightcontrolmodel.linear"/>
        </do_if>
        <wait exact="20s"/>
      </do_if>
      <set_to_default_flight_control_model object="this.ship"/>
      <set_value name="this.$mayabortpath" comment="tell following movement Script that the remainder of the Path is irrelevant"/>
      
      <!-- un-register from Passage Group to allow the Leader to continue -->
      <remove_from_group group="$passage_group" object="this.ship"/>
      
      <!-- wait till everyone in Group has passed the Gate (unregistered from Group) -->
      <do_if value="not $leader">
        <do_while value="$passage_group.count">
          <wait max="1min" comment="fallback: re-check regulary">
            <interrupt>
              <conditions>
                <event_object_signalled object="this.ship" param="'preparegroup shrunk'"/>
              </conditions>
            </interrupt>
          </wait>
        </do_while>
      </do_if>
      <do_else>
        <signal_objects object="$leader" param="'preparegroup shrunk'"/>
        <do_while value="$passage_group.count">
          <wait max="1min" comment="fallback: re-check regulary">
            <interrupt>
              <conditions>
                <event_object_signalled object="$leader" param="'preparegroup shrunk'"/>
              </conditions>
            </interrupt>
          </wait>
        </do_while>
      </do_else>
      
      <do_if value="this.ship.owner == faction.player">
        <set_object_name object="this.ship" name="this.ship.macro.name"/>
      </do_if>
    </actions>
  </attention>
  <on_abort>
      <do_if value="this.ship.owner == faction.player">
        <set_object_name object="this.ship" name="this.ship.macro.name"/>
    </do_if>
    
     <!-- remove ourselves from the waiting List if we are in it and signal everyone the Queue has been changed-->
    <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
      <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
      <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
        <debug_text filter="error" text="'%1 %2 Abort Case Occupied mote than one queue Slot, additional one: %3'.[this.name,this.container.name,global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
        <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
        <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
          <debug_text filter="error" text="'And also %1 (2nd check)'.[global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
          <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
          <do_if value="global.$gate_queue.{$gate}.{1}.indexof.{this.ship}">
            <debug_text filter="error" text="'And also %1 (last check)'.[global.$gate_queue.{$gate}.{1}.indexof.{this.ship}]"/>
            <remove_value name="global.$gate_queue.{$gate}.{1}.{global.$gate_queue.{$gate}.{1}.indexof.{this.ship}}"/>
          </do_if>
        </do_if>
      </do_if>
      <signal_objects object="$gate" param="'travel gate update'"/>
    </do_if>
    <!-- also unblock the Vanilla mechanic -->
    <request_gate ship="this.ship" gate="if true then $gate else 'unlock abort'" unlock="true" result="$result"/>
    <!-- reset FCM to default -->
    <set_to_default_flight_control_model object="this.ship"/>
    <!-- signal our followers to stop -->
    <signal_objects object="this.ship" param="'travel aborted'"/>
    <!-- remove from Passage Group -->
    <remove_from_group group="$passage_group" object="this.ship"/>
    <!-- restore collision avoidance behavior -->
    <set_avoid_collisions object="this.ship" bigobjects="true" smallobjects="true"/>
  </on_abort>
</aiscript>